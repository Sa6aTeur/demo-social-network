{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","wsStatus","useSelector","state","chat","useEffect","startMsgListening","stopMsgListening","Messages","AddMesagesForm","messagesAnchorRef","useRef","messages","useState","autoScroll","setAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","map","m","Message","message","id","ref","React","memo","src","photo","width","userName","setMessage","value","onChange","disabled","onClick","sendMessage","type","ChatPage"],"mappings":"gLAiBMA,EAAiB,WAErB,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAWjE,OATAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAGV,IAID,gCACgB,UAAbN,GAAwB,wCACzB,qCACA,cAACO,EAAD,IACA,cAACC,EAAD,WAOAD,EAAsB,WAG1B,IAAME,EAAoBC,iBAAuB,MAC3CC,EAAWV,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YAJjC,EAMIC,oBAAS,GANb,mBAMzBC,EANyB,KAMbC,EANa,KAwBhC,OAPAV,qBAAU,WACO,IAAD,EAAXS,IACD,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAEtD,CAACN,IAIF,8BACE,sBAAKO,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAUC,SAnBjC,SAACC,GACrB,IAAIC,EAAUD,EAAEE,cACbC,KAAKC,IAAIH,EAAQI,aAAaJ,EAAQK,YAAa,IACnDf,GAAcC,GAAc,GAE7BD,GAAaC,GAAc,IAc3B,UACEH,EAASkB,KAAI,SAACC,GAAD,OAAwB,cAACC,EAAD,CAAoBC,QAAWF,GAAjBA,EAAEG,OACtD,qBAAKC,IAAKzB,UAOXsB,EAAiDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAClE,OACE,gCACG,gCACG,qBAAKK,IAAKL,EAAQM,MAAOpB,MAAO,CAACqB,MAAO,UAD3C,IACuD,4BAAIP,EAAQQ,cAEnE,8BACG,+BAAOR,EAAQA,YAEjB,6BAMFxB,EAA4B,WAAO,IAAD,EAERI,mBAAS,IAFD,mBAE/BoB,EAF+B,KAEtBS,EAFsB,KAGhCzC,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAE3DF,EAAWC,cAcjB,OACE,gCACE,8BACI,0BAAU2C,MAAOV,EAASW,SAAU,SAACrB,GAAD,OAAOmB,EAAWnB,EAAEE,cAAckB,QAAtE,kBAGJ,8BACI,cAAC,IAAD,CAAQE,SAAuB,UAAb5C,EAAsB6C,QAnB1B,WAEhBb,IAKLlC,EAASgD,YAAYd,IACrBS,EAAW,MAW4DM,KAAK,UAArE,wBAQKC,UAzHa,WAE1B,OACE,8BACI,cAACnD,EAAD","file":"static/js/4.be7cff30.chunk.js","sourcesContent":["import { Button } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage, startMsgListening, stopMsgListening } from '../../redux/chat-reduser'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\n\r\nconst ChatPage: React.FC  = () => {\r\n\r\n  return (\r\n    <div>\r\n        <Chat/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const wsStatus = useSelector((state: AppStateType) => state.chat.wsStatus)\r\n\r\n  useEffect(() => {\r\n    dispatch(startMsgListening())\r\n    return () => {\r\n      dispatch(stopMsgListening())\r\n    }\r\n\r\n  }, [])\r\n  \r\n \r\n  return(\r\n    <div>\r\n      {wsStatus === 'error' && <div>Error</div>}\r\n      <>  \r\n      <Messages  />\r\n      <AddMesagesForm  />     \r\n      </>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Messages: React.FC  = () => {\r\n  \r\n  \r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n\r\n  const [autoScroll, setAutoScroll] = useState(true)\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement>) =>{\r\n    let element = e.currentTarget\r\n    if(Math.abs(element.scrollHeight-element.scrollTop )<=10){\r\n      !autoScroll && setAutoScroll(true)\r\n    } else{\r\n      autoScroll &&setAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  \r\n  useEffect(() => {\r\n    if(autoScroll){\r\n      messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }   \r\n  }, [messages])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div style={{height: \"470px\", overflowY: \"auto\" }} onScroll={scrollHandler}>\r\n       {messages.map((m: ChatMessageType) => <Message key={m.id} message = {m} /> )}\r\n       <div ref={messagesAnchorRef}></div>\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Message: React.FC<{message: ChatMessageType}>  = React.memo(({message}) => {\r\n  return (\r\n    <div>\r\n       <div>\r\n          <img src={message.photo} style={{width: '40px'}} /> <b>{message.userName}</b>\r\n       </div>\r\n       <div>\r\n          <span>{message.message}</span>\r\n       </div>\r\n        <hr/>\r\n    </div>\r\n  )\r\n}) \r\n\r\n\r\nconst AddMesagesForm: React.FC  = () => {\r\n\r\n  const [message, setMessage] = useState('')\r\n  const wsStatus = useSelector((state: AppStateType) => state.chat.wsStatus)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onSendMessage = () => {\r\n\r\n    if(!message){\r\n      return;\r\n    }\r\n\r\n    \r\n   dispatch(sendMessage(message))\r\n   setMessage('')\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n          <textarea value={message} onChange={(e) => setMessage(e.currentTarget.value) } >  </textarea>\r\n      </div>\r\n\r\n      <div>\r\n          <Button disabled={wsStatus !== 'ready'} onClick={onSendMessage} type=\"primary\">Send</Button>\r\n          \r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default ChatPage\r\n\r\n//Types\r\nexport type ChatMessageType =  {\r\n  message: string\r\n  photo: string\r\n  userId: number\r\n  userName: string\r\n  id: string\r\n}"],"sourceRoot":""}