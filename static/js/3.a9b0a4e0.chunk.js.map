{"version":3,"sources":["components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dilogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Dialog","props","className","s","dialogsItems","dialog","active","to","id","name","Message","message","maxLength","maxLenghtCreator","Dialogs","React","memo","dialogsElements","useSelector","state","dialogsPage","dialogs","map","p","messagesElements","messages","m","index","dispatch","useDispatch","ReduxAddMessageForm","onSubmit","values","actions","sendMessage","newMessageText","reduxForm","form","handleSubmit","createField","Textarea"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,aAAe,6BAA6B,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,0B,oBCA9KD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,gBAAkB,kC,oBCAtED,EAAOC,QAAU,CAAC,QAAU,2B,8HCmBbC,EAfqB,SAACC,GACnC,OAEE,qBAAKC,UAAWC,IAAEC,aAAlB,SAEA,qBAAKF,UAAWC,IAAEE,OAAO,IAAIF,IAAEG,OAA/B,SACQ,cAAC,IAAD,CAASC,GAAI,YAAaN,EAAMO,GAAhC,SACIP,EAAMQ,Y,oCCAPC,EATsB,SAACT,GAEpC,OACI,qBAAKC,UAAWC,IAAEQ,QAAlB,SACE,4BAAIV,EAAMU,a,SCMZC,EAAYC,YAAiB,IAG7BC,EAAoBC,IAAMC,MAC9B,WAEE,IAAMC,EAAkBC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,YAAYC,WAASC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAASf,GAAIe,EAAEf,GAAeC,KAAMc,EAAEd,MAAdc,EAAEf,OAErHgB,EAAmBN,aAAY,SAACC,GAAD,OAAyBA,EAAMC,YAAYK,YAAUH,KAAI,SAACI,EAAEC,GAAH,OAAa,cAAC,EAAD,CAAqBhB,QAASe,EAAEf,SAAlBgB,MAGnHC,EAAWC,cAQjB,OACE,sBAAK3B,UAAWC,IAAEkB,QAAlB,UACI,qBAAKnB,UAAWC,IAAEc,gBAAlB,SACGA,IAEL,sBAAKf,UAAWC,IAAEsB,SAAlB,UACE,8BAAMD,IACJ,cAACM,EAAD,CAAqBC,SAZP,SAACC,GACrBJ,EAASK,IAAQC,YAAYF,EAAOG,6BAiCpCL,EAAsBM,YAAiC,CAAEC,KAAM,WAAzCD,EAdP,SAACnC,GACpB,OACE,sBAAM8B,SAAU9B,EAAMqC,aAAtB,SACM,gCACE,qBAAKpC,UAAWC,IAAEsB,SAAlB,SACGc,YAAmC,qBAAqB,iBAAiB,CAAC3B,GAAW4B,OAExF,qBAAKtC,UAAWC,IAAEsB,SAAlB,SACE,sDASCX","file":"static/js/3.a9b0a4e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__3vjwz\",\"dialogsItems\":\"Dialog_dialogsItems__3Zr67\",\"active\":\"Dialog_active__18DnR\",\"messages\":\"Dialog_messages__1ylmg\",\"message\":\"Dialog_message__3csPz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dilogs_dialogs__30XMu\",\"dialogsElements\":\"Dilogs_dialogsElements__3XlYR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3a8fH\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './Dialog.module.css'\r\n\r\n\r\nconst Dialog: React.FC<PropsType> = (props) => {\r\n  return (\r\n   \r\n    <div className={s.dialogsItems}>\r\n  \r\n    <div className={s.dialog+' '+s.active}>\r\n            <NavLink to={'/dialogs/'+ props.id}>\r\n               {props.name}\r\n            </NavLink> \r\n    </div>\r\n   \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialog\r\n\r\n////Types \r\ntype PropsType = { \r\n  name: string\r\n  id: number\r\n}","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  \r\n  return (\r\n      <div className={s.message}>\r\n        <p>{props.message}</p>\r\n      </div>  \r\n  )\r\n}\r\n\r\nexport default Message\r\n////Type\r\ntype PropsType = {\r\n  message: string\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\nimport { maxLenghtCreator, required } from '../../utils/validators/validators';\r\nimport Textarea, { createField } from '../Common/FormControls/FormControls';\r\nimport Dialog from './Dialog/Dialog'\r\nimport s from './Dilogs.module.css'\r\nimport Message from './Message/Message'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport {actions} from '../../redux/dialogs-reducer';\r\n\r\n\r\nconst maxLength = maxLenghtCreator(25);\r\n\r\n\r\nconst Dialogs: React.FC = React.memo(\r\n  () => {\r\n\r\n    const dialogsElements = useSelector((state: AppStateType) => state.dialogsPage.dialogs).map(p => <Dialog  id={p.id} key={p.id} name={p.name} />)\r\n  \r\n    const messagesElements = useSelector((state: AppStateType) => state.dialogsPage.messages).map((m,index) => <Message key={index} message={m.message} /> )\r\n  \r\n  \r\n    const dispatch = useDispatch()\r\n  \r\n  \r\n    const addNewMessage = (values: DialogsFormValuesType) =>{\r\n      dispatch(actions.sendMessage(values.newMessageText));\r\n    }\r\n  \r\n  \r\n    return (\r\n      <div className={s.dialogs}>\r\n          <div className={s.dialogsElements}>\r\n            {dialogsElements}\r\n          </div>\r\n        <div className={s.messages}>\r\n          <div>{messagesElements}</div>\r\n            <ReduxAddMessageForm onSubmit={addNewMessage}/>\r\n          </div>            \r\n      </div>\r\n    )\r\n  }\r\n) \r\n\r\n\r\nlet AddMessageForm = (props: InjectedFormProps<DialogsFormValuesType>) =>{ \r\n  return(\r\n    <form onSubmit={props.handleSubmit}>               \r\n          <div>\r\n            <div className={s.messages}>\r\n              {createField<DialogsFormValuesKeys>(\"Enter your message\",\"newMessageText\",[maxLength],Textarea)}\r\n            </div>\r\n            <div className={s.messages}>\r\n              <button > Send </button>\r\n            </div>\r\n          </div>     \r\n    </form>\r\n  )\r\n}\r\nconst ReduxAddMessageForm = reduxForm<DialogsFormValuesType>({ form: \"message\"})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs\r\n\r\n\r\n///Types\r\nexport type DialogsFormValuesType ={\r\n  newMessageText: string\r\n}\r\ntype DialogsFormValuesKeys = Extract<keyof DialogsFormValuesType, string>"],"sourceRoot":""}