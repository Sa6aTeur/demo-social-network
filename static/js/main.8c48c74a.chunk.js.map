{"version":3,"sources":["components/Common/FormControls/FormControls.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reduser.ts","components/Profile/MyPosts/Posts/Post.module.css","components/Header/header.module.css","components/Common/FormControls/FormControls.tsx","api/api.ts","api/auth-api.ts","api/profile-api.ts","redux/auth-reducer.ts","redux/profile-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reduser.ts","redux/app-reducer.ts","redux/redux-store.ts","assets/img/Preloader.png","components/Common/Preloader/Preloader.tsx","components/Common/Paginator/Paginator.tsx","assets/img/userImg.jpg","redux/users-selectors.ts","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","components/Header/Header.tsx","App.tsx","index.js","utils/validators/validators.ts","components/Users/user.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageText","type","dialogsReducer","state","action","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","console","log","createWs","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","event","callback","push","filter","send","wsStatus","payload","_newMessageHandler","newMessageHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMsgListening","a","stopMsgListening","chatReducer","map","m","v1","index","array","length","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","ResultCodesEnum","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","res","email","password","rememberMe","post","delete","profileAPI","userId","put","photoFile","formData","FormData","append","profile","isFetching","login","isAuth","photos","getAuthUserData","response","resultCode","Success","userPhoto","authReducer","posts","newPostText","addPost","postText","setUserProfile","setUserStatus","savePhotoSuccess","saveProfileSuccess","getUserProfile","updateUserStatus","savePhoto","file","getState","auth","Error","saveProfile","profileReducer","newPost","likesCount","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","followingInProgress","pageNumber","totalCount","requestUsers","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","initialazed","appReducer","reducers","combineReducers","profilePage","dialogsPage","usersPage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Preloader","overlay","preloader","src","preloader__image_animate","Paginator","totalItemsCount","onCurrentPageChanged","pagesCount","Math","ceil","pages","i","useState","portionNumber","setPortionNumber","onClick","current","onChange","page","showSizeChanger","total","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","User","user","useSelector","useDispatch","onFollow","bind","onUnfollow","mainWrap","avatarWrap","to","avatar","shape","size","small","userImg","button","loading","some","disabled","style","fontWeight","color","usersSearchFormValidate","values","test","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","onSubmit","setSubmitting","onFilterChanged","isSubmitting","span","defaultValue","width","value","htmlType","Users","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","paddingTop","textAlign","Post","photo","large","item","author","defaultPhoto","alt","content","datetime","title","moment","format","fromNow","maxLenght","maxLenghtCreator","ReduxAddPostForm","reduxForm","handleSubmit","submitButton","MyPosts","postsElements","p","postBlock","ProfileStatusWithHook","editMode","seteditMode","setstatus","statusWrap","marginTop","marginBottom","isOwner","maxLength","currentTarget","autoFocus","onBlur","ProfileDataFormWithRedux","target","files","required","Contact","contactTitle","contactValue","contact","ProfileData","toEditMode","fullName","lookingForAJob","aboutMe","Object","keys","contacts","key","ProfileInfo","setEditMode","descriptionBlock","defaultUserImg","ProfileStatus","Profile","mapStateToPropsForRedirect","withAuthRedirect","WrappedComponent","connect","ProfileContainer","this","match","params","myId","getUserStatus","refreshProfile","prevProps","Component","withRouter","LoginReduxForm","undefined","formSummaryError","LoginPage","stopSubmit","_error","AppHeader","onLogoutClick","theme","mode","defaultSelectedKeys","loginBlock","backgroundColor","marginRight","SubMenu","Menu","Content","Layout","Footer","Sider","ChatPage","lazy","App","catchAllUnhandledErrors","initializeApp","padding","height","icon","UserOutlined","Item","LaptopOutlined","minHeight","path","render","Suspense","fallback","AppContainer","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8c48c74a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3E5O0\",\"error\":\"FormControls_error__1nWQP\",\"formSummaryError\":\"FormControls_formSummaryError__fFA4i\",\"rememberMe\":\"FormControls_rememberMe__1sWHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Preloader_overlay__sxULL\",\"preloader\":\"Preloader_preloader__9r3nN\",\"preloader__image_animate\":\"Preloader_preloader__image_animate__3gSDa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topImage\":\"ProfileInfo_topImage__24OjZ\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3ooU8\",\"userImg\":\"ProfileInfo_userImg__340pV\",\"contact\":\"ProfileInfo_contact__JhiLY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__2wELq\",\"postBlock\":\"MyPosts_postBlock__3dBuz\",\"submitButton\":\"MyPosts_submitButton__1Nl6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusWrap\":\"ProfileStatus_statusWrap__28lUq\",\"status\":\"ProfileStatus_status__32Mne\"};","import { InferActionsTypes } from \"./redux-store\"\r\n\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    {id: 1, name: \"Vitya\"},\r\n    {id: 2, name: \"Vika\"},\r\n    {id: 3, name: \"Viktot\"},\r\n    {id: 4, name: \"Vasya\"},\r\n    {id: 5, name: \"Vanya\"},\r\n    {id: 6, name: \"Vova\"},\r\n  ] as Array<DialogType>,\r\n\r\n  messages: [\r\n    { message: \"Hi\"},\r\n    { message: \"Priv\"},\r\n    { message: \"kak dela\"},\r\n    { message: \"norm\"},\r\n    { message: \"toje\"},\r\n    { message: \"poka\"},\r\n  ] as Array<{message: string}>\r\n}\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType):InitialStateType => {  \r\n  switch(action.type){\r\n    \r\n    case 'SN/DIALOGS/SEND_MESSAGE': {\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages,{message: action.newMessageText}],\r\n      }\r\n    }\r\n    \r\n    default:\r\n      return state\r\n    }\r\n}\r\n\r\n///////// Actions\r\nexport const actions = {\r\n  sendMessage: (newMessageText: string) => ({ \r\n      type: 'SN/DIALOGS/SEND_MESSAGE',\r\n      newMessageText\r\n  } as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer\r\n\r\n//Types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DialogType ={\r\n  id: number,\r\n  name: string\r\n}","\r\nlet subscribers = {\r\n  'message-received': [] as Array<MessagesReceivedSubscriberType>,\r\n  'status-changed': [] as Array<StatusChangedSubscriberType>\r\n} \r\nlet ws: WebSocket | null = null\r\n\r\n\r\nconst closeHandler = () => {\r\n \r\n  notifySubscribersAboutStatus('pending')\r\n\r\n  setTimeout(() =>{ console.log('RESTART PAGE') \r\n                    createWs()}, 2500) \r\n}\r\n\r\n\r\nconst messageHandler = (e: MessageEvent) => { \r\n\r\n  let newMessages = JSON.parse(e.data)\r\n\r\n  subscribers['message-received'].forEach(s => s(newMessages))\r\n}\r\n\r\n\r\nconst openHandler = () => { \r\n  notifySubscribersAboutStatus('ready')\r\n}\r\n\r\n\r\nconst errorHandler = () => {\r\n  \r\n  notifySubscribersAboutStatus('error')\r\n\r\n  console.log('RESTART PAGE')\r\n}\r\n\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener('message',messageHandler) \r\n  ws?.removeEventListener('close',closeHandler)\r\n  ws?.removeEventListener('open',openHandler) \r\n  ws?.removeEventListener('error',errorHandler)\r\n}\r\n\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) =>{\r\n  subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\n\r\nfunction createWs() {\r\n\r\n  cleanUp()\r\n  ws?.close()\r\n\r\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx') \r\n  notifySubscribersAboutStatus('pending')\r\n  ws.addEventListener('close',closeHandler)\r\n  ws.addEventListener('message',messageHandler)\r\n  ws.addEventListener('open',openHandler)  \r\n  ws.addEventListener('error',errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n\r\n  start(){\r\n    createWs()\r\n  },\r\n\r\n\r\n  stop(){\r\n    subscribers['message-received'] = []\r\n    subscribers['status-changed'] = []\r\n    cleanUp() \r\n    ws?.close()\r\n  },\r\n\r\n  \r\n  subscribe(event: EventsNamesType,callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n    //@ts-ignore\r\n    subscribers[event].push(callback)\r\n    return () => {\r\n      //@ts-ignore\r\n      subscribers[event] = subscribers[event].filter(s => s!== callback)\r\n    }   \r\n  },\r\n\r\n  unsubscribe(event: EventsNamesType ,callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n    //@ts-ignore\r\n    subscribers[event] = subscribers[event].filter(s => s!== callback)\r\n  },\r\n\r\n  sendMessage(message:string){\r\n    ws?.send(message)\r\n  }\r\n}\r\n\r\n\r\n//Types\r\nexport type ChatMessageApiType =  {\r\n  message: string\r\n  photo: string\r\n  userId: number\r\n  userName: string\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageApiType[])=> void\r\n\r\ntype StatusChangedSubscriberType = (status: StatusType)=> void\r\n\r\ntype StatusType = 'pending' | 'ready' | 'error'\r\n\r\ntype EventsNamesType = 'message-received' | 'status-changed'","import { ChatMessageApiType } from './../api/chat-api';\r\nimport { ChatMessageType } from './../pages/Chat/ChatPage';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { chatAPI } from '../api/chat-api';\r\nimport { Dispatch } from 'redux';\r\nimport {v1} from 'uuid'\r\n\r\n\r\nlet initialState = {\r\n  messages: [] as Array<ChatMessageType>,\r\n  wsStatus: 'pending' \r\n}   \r\n\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType  => {\r\n  \r\n  switch(action.type){\r\n    case 'SN/CHAT/SET_MESSAGES':\r\n\r\n      return{\r\n        ...state,\r\n        messages: [...state.messages, ... action.payload.messages.map(m => ({...m ,id: v1() }))].filter((m,index,array)=> index >= array.length -100)\r\n            \r\n      }\r\n    case 'SN/CHAT/WS_STATUS_CHANGED':\r\n    \r\n      return{\r\n        ...state,\r\n        wsStatus: action.payload.status\r\n            \r\n      }  \r\n\r\n    default:\r\n      return state; \r\n    }\r\n}\r\n  \r\n\r\n// ACTIONS CREATORS\r\nexport const actions = {\r\n\r\n  setMessages: (messages: ChatMessageApiType[]) => (\r\n    {type: 'SN/CHAT/SET_MESSAGES',\r\n     payload:{messages}} as const),\r\n  \r\n  wsStatusChanged: (status: StatusType) => (\r\n    {type: 'SN/CHAT/WS_STATUS_CHANGED',\r\n     payload:{status}} as const),\r\n\r\n}\r\n\r\n\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageApiType[]) =>void) | null = null\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) =>{\r\n  if (_newMessageHandler===null) {\r\n    _newMessageHandler = (messages) => { \r\n      dispatch(actions.setMessages(messages))\r\n    }\r\n  }\r\n  return _newMessageHandler\r\n} \r\n\r\n\r\nlet _statusChangedHandler: ((status: StatusType) =>void) | null = null\r\n\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) =>{\r\n  if (_statusChangedHandler===null) {\r\n    _statusChangedHandler = (status: StatusType) => { \r\n      dispatch(actions.wsStatusChanged(status))\r\n      console.log(status)\r\n    }\r\n  }\r\n  return _statusChangedHandler\r\n} \r\n\r\n\r\n\r\n// THUNKS CREATORS\r\nexport const startMsgListening = (): ThunkType => async (dispatch) =>{\r\n  \r\n  chatAPI.start()\r\n\r\n  chatAPI.subscribe('message-received',newMessageHandlerCreator(dispatch))\r\n\r\n  chatAPI.subscribe('status-changed',statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\n\r\n\r\nexport const stopMsgListening = (): ThunkType => async (dispatch) =>{\r\n \r\n  chatAPI.unsubscribe('message-received',newMessageHandlerCreator(dispatch))\r\n  \r\n  chatAPI.unsubscribe('status-changed',statusChangedHandlerCreator(dispatch))\r\n\r\n  chatAPI.stop()\r\n}\r\n\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) =>{\r\n  \r\n  chatAPI.sendMessage(message) \r\n}\r\n\r\n\r\nexport default chatReducer;\r\n\r\n//Types\r\nexport type InitialStateType =  typeof initialState \r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\ntype StatusType = 'pending' | 'ready' | 'error'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__hs_ML\",\"likeCount\":\"Post_likeCount__3JT-X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__29HNV\",\"loginBlock\":\"header_loginBlock__1QTRy\"};","import React from 'react'\r\nimport { Field, submit, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\nimport styles from './FormControls.module.css'\r\n\r\n\r\ntype FormControlPropsType ={\r\n  meta: WrappedFieldMetaProps\r\n  children: React.ReactNode\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormControlPropsType> =({ meta: {touched,error}, children}) => {\r\n  const hasError = touched && error;\r\n  return <div className = {styles.formControl + \" \" + (hasError && styles.error)}>\r\n  {children}\r\n  <div>\r\n    {hasError && <span>{error}</span>}\r\n  </div>\r\n</div>  \r\n}\r\n\r\n\r\nexport  const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  //const {input, meta,elemen, ...restProps} = props;\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}><textarea {...input}  {...restProps}/></FormControl>\r\n  )\r\n}\r\n\r\n\r\nexport  const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const {input, meta, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}><input  {...input}  {...restProps}/></FormControl>\r\n  )\r\n}\r\n\r\n\r\nexport  function createField<Keys extends string>(placeholder: string|undefined=\"\",\r\n                             name: Keys ,\r\n                             validators: Array<FieldValidatorType>,\r\n                             component: string | React.Component| React.FC<WrappedFieldProps>,\r\n                             props = {},\r\n                             text = \"\" ) {\r\n  return(<div><Field \r\n    placeholder={placeholder} \r\n    name={name} \r\n    component={component} \r\n    validate={validators}\r\n    {...props} /> <span>{text}</span>\r\n    </div>  )                            \r\n                             }\r\n\r\n\r\nexport default Textarea\r\n","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    \"API-KEY\" : \"cad2d11f-139f-4f54-ba7e-64d0bebc13f0\"\r\n  }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\n\r\n\r\nexport type GetItemsType<T> ={\r\n  items: Array<T>\r\n  totalCount: number\r\n  error?: string\r\n}\r\n\r\n\r\nexport type APIResponseType< D = {}, RC = ResultCodesEnum > = {\r\n  data: D\r\n  messages: Array<string>\r\n  resultCode: RC\r\n}","import { instance, APIResponseType } from \"./api\"\r\n\r\n\r\nexport const authAPI = {\r\n\r\n  me(){\r\n    return instance.get<APIResponseType<MeDataType>>(`auth/me`).then(res => res.data)\r\n  },\r\n\r\n\r\n  login(email: string, password: string, rememberMe = false){\r\n    return instance.post<APIResponseType<{userId: number}>>(`auth/login`,{email, password, rememberMe})\r\n    .then(res => res.data)\r\n  },\r\n\r\n\r\n  logout(){\r\n    return instance.delete(`auth/login`)\r\n  }\r\n}\r\n\r\n\r\n//Types\r\ntype MeDataType ={\r\n  id: number\r\n  email: string\r\n  login: string \r\n}","import { ProfileType, PhotosType } from './../types/types';\r\nimport { instance,APIResponseType  } from \"./api\";\r\n\r\n\r\nexport const profileAPI = {\r\n\r\n  getProfile(userId: number){\r\n    return instance.get<ProfileType>(`profile/`+ userId).then(res => res.data)\r\n  },\r\n\r\n\r\n  getStatus(userId: number){\r\n    return instance.get<string>(`profile/status/`+ userId).then(res => res.data)\r\n  },\r\n  \r\n\r\n  updateStatus(status: string){\r\n    return instance.put<APIResponseType>(`profile/status`,{status: status}).then(res => res.data)\r\n  },\r\n\r\n\r\n  savePhoto(photoFile: any){\r\n    let formData =new FormData();\r\n    formData.append(\"image\", photoFile)\r\n\r\n    return instance.put<APIResponseType<PhotosType>>(`profile/photo`,formData,{\r\n      headers:{\r\n        'Content-Type' : 'multipart/form-data'\r\n      }\r\n    }).then(res => res.data)\r\n\r\n  },\r\n\r\n\r\n  saveProfile(profile: ProfileType){\r\n    return instance.put<APIResponseType>(`profile`,profile).then(res => res.data)\r\n  }, \r\n }","import { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { ResultCodesEnum } from '../api/api';\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { authAPI } from '../api/auth-api';\r\nimport { Redirect } from 'react-router';\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { PhotosType } from '../types/types';\r\n\r\n\r\n\r\nlet initialState = {\r\n  isFetching: false,\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  photos: {} as PhotosType\r\n  }   \r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType  => {\r\n  \r\n  switch(action.type){\r\n    case 'SN/AUTH/SET_AUTH_USER':\r\n      return{\r\n        ...state,\r\n        ...action.payload,\r\n            \r\n      }\r\n\r\n    case 'SN/AUTH/SET_AUTH_USER_PHOTO':\r\n      return{\r\n        ...state,\r\n        photos: action.payload.photos\r\n            \r\n      }\r\n\r\n    default:\r\n      return state; \r\n    }\r\n}\r\n  \r\n\r\n// ACTIONS CREATORS\r\nexport const actions = {\r\n  setAuthUserData: (userId: number|null,email: string|null,login: string|null,isAuth: boolean) => (\r\n    {type: 'SN/AUTH/SET_AUTH_USER',\r\n     payload:{userId,email,login, isAuth}} as const),\r\n\r\n  setAuthUserPhoto: (photos: PhotosType) => (\r\n    {\r\n    type: 'SN/AUTH/SET_AUTH_USER_PHOTO',\r\n    payload:{photos}} as const) \r\n}\r\n\r\n\r\n// THUNKS CREATORS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) =>{\r\n  let response = await authAPI.me()\r\n  if(response.resultCode === ResultCodesEnum.Success){   \r\n     \r\n    let{id,login,email} = response.data;\r\n    let isAuth = true;\r\n    dispatch(actions.setAuthUserData(id,email,login,isAuth)); \r\n\r\n    let userPhoto = (await profileAPI.getProfile(id)).photos\r\n    dispatch(actions.setAuthUserPhoto(userPhoto))\r\n  }    \r\n  \r\n}\r\n\r\n\r\nexport const login = (email: string,password: string,rememberMe: boolean): ThunkType => async (dispatch) =>{  \r\n  let response = await authAPI.login(email,password,rememberMe)\r\n\r\n  if(response.resultCode === ResultCodesEnum.Success){    \r\n    dispatch(getAuthUserData())       \r\n  }else {\r\n    let message = response.messages.length > 0 ? response.messages[0] \r\n                                                    : \"Some error\"\r\n    dispatch(stopSubmit(\"login\",{_error: message}))  \r\n  }\r\n\r\n}\r\n\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) =>{\r\n  let response = await authAPI.logout()\r\n    \r\n  if(response.data.resultCode === ResultCodesEnum.Success){    \r\n    let isAuth = false;\r\n    dispatch(actions.setAuthUserData(null,null,null,isAuth));    \r\n  }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n//Types\r\nexport type InitialStateType =  typeof initialState \r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>","import {  getAuthUserData } from './auth-reducer';\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { PostType, ProfileType, PhotosType } from './../types/types';\r\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n  posts: [] as Array<PostType>,   \r\n  profile: null as ProfileType|null ,\r\n  status: \"\",\r\n  newPostText: ''\r\n} \r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType):InitialStateType => {\r\n  switch(action.type){\r\n    case 'SN/PROFILE/ADD_POST': \r\n      let newPost={\r\n        id: 5,\r\n        message: action.postText,\r\n        likesCount: 0\r\n        }\r\n        return  {\r\n          ...state,\r\n          posts: [...state.posts, newPost],\r\n        }\r\n\r\n    case 'SN/PROFILE/SET_USER_PROFILE': \r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      }\r\n    case 'SN/PROFILE/SET_USER_STATUS': \r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      }\r\n   \r\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCESS': \r\n      return {\r\n        ...state,\r\n        profile: {...state.profile, photos: action.photos} as ProfileType,\r\n      }\r\n    case 'SN/PROFILE/SAVE_PROFILE_SUCCESS': \r\n      return {\r\n        ...state,\r\n        profile: {...state.profile, ...action.profile},\r\n      }\r\n    default:\r\n      return state; \r\n    }\r\n}\r\n\r\n\r\n///////Actions\r\nexport const actions = {\r\n  addPost: (postText: string) => ({\r\n      type: 'SN/PROFILE/ADD_POST',\r\n      postText\r\n  } as const),\r\n\r\n  setUserProfile: (profile: ProfileType) => ({\r\n    type : 'SN/PROFILE/SET_USER_PROFILE',\r\n    profile\r\n  } as const),\r\n\r\n  setUserStatus: (status: string) => ({\r\n    type : 'SN/PROFILE/SET_USER_STATUS',\r\n    status\r\n  } as const),\r\n\r\n  savePhotoSuccess: (photos: PhotosType) => ({\r\n    type : 'SN/PROFILE/SAVE_PHOTO_SUCCESS',\r\n    photos\r\n  } as const),\r\n\r\n  saveProfileSuccess: (profile: ProfileType) => ({\r\n    type : 'SN/PROFILE/SAVE_PROFILE_SUCCESS',\r\n    profile\r\n  } as const),\r\n  \r\n}\r\n\r\n\r\n///Thunks\r\nexport const getUserProfile = (userId: number):ThunkType => async (dispatch) =>{\r\n  let data = await profileAPI.getProfile(userId)\r\n\r\n  dispatch(actions.setUserProfile(data))    \r\n}\r\n \r\n\r\nexport const getUserStatus = (userId: number):ThunkType => async (dispatch) =>{\r\n  let data = await profileAPI.getStatus(userId)\r\n  dispatch(actions.setUserStatus(data))    \r\n}\r\n\r\n\r\nexport const updateUserStatus = (status: string):ThunkType => async (dispatch) =>{\r\n  let data = await profileAPI.updateStatus(status)\r\n  \r\n  if(data.resultCode === 0) {\r\n    dispatch(actions.setUserStatus(status))  \r\n  }  \r\n}\r\n\r\n\r\nexport const savePhoto = (file: File):ThunkType => async (dispatch,getState) =>{\r\n  let data = await profileAPI.savePhoto(file)\r\n  let userId = getState().auth.userId\r\n\r\n  if(data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data))\r\n    dispatch(getAuthUserData())\r\n\r\n    if(userId != null){\r\n      dispatch(getUserProfile(userId)) \r\n    }else {\r\n      throw new Error(\"userId can be null\")\r\n    }  \r\n  }  \r\n}\r\n\r\n\r\nexport const saveProfile = (profile :ProfileType):ThunkType => async (dispatch, getState) =>{\r\n  let data = await profileAPI.saveProfile(profile)\r\n  let userId = getState().auth.userId\r\n\r\n  if(data.resultCode === 0) {\r\n    if(userId != null){\r\n      dispatch(getUserProfile(userId)) \r\n    }else {\r\n      throw new Error(\"userId can be null\")\r\n    }\r\n  }  \r\n}\r\n\r\nexport default profileReducer;\r\n\r\n\r\n//Types\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BaseThunkType<ActionsType>\r\ntype ActionsType = InferActionsTypes<typeof actions>","export const updateObjectInArray = (items: Array<any>,itemId: number,objPropName: string,newObjProps: any) =>{\r\n return items.map(u => {\r\n    if(u[objPropName] === itemId) {\r\n      return{...u, ...newObjProps};\r\n    }\r\n    return u;\r\n  })   \r\n}","import { FilterType } from \"../redux/users-reduser\";\r\nimport { UserType } from \"./../types/types\"\r\nimport { instance, GetItemsType, APIResponseType } from \"./api\"\r\n\r\n\r\nexport const usersAPI = {\r\n\r\n  getUsers(currentPage= 1, pageSize= 3 , filter: FilterType ){\r\n    return instance.get<GetItemsType<UserType>>(`users?page=${currentPage}&count=${pageSize}&term=${filter.term}` + \r\n     (filter.term===null ? '' : `&friend=${filter.friend}`)).then(res => res.data);\r\n  },\r\n\r\n\r\n  follow(userId: number){\r\n    return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data);\r\n  },\r\n\r\n\r\n  unfollow(userId: number){\r\n    return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>;\r\n  },\r\n\r\n}\r\n\r\n","import { APIResponseType } from './../api/api';\r\nimport { AppStateType, BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { UserType } from './../types/types';\r\nimport { updateObjectInArray } from '../utils/object-helpers'\r\nimport { Dispatch } from 'redux';\r\nimport { usersAPI } from '../api/users-api';\r\n\r\n\r\nlet initialState = {\r\nusers: [] as Array<UserType>,\r\ntotalUsersCount: 30,\r\npageSize: 4,\r\ncurrentPage: 1,\r\nisFetching: true,\r\nfollowingInProgress: [] as Array<number>, //Array of users id,\r\nfilter: {\r\n  term: '',\r\n  friend: null as null|boolean\r\n}\r\n}\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes):InitialStateType => {\r\n  switch(action.type){\r\n    case 'SN/USERS/FOLLOW': \r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\" , {followed: true})   \r\n      }\r\n      \r\n    case 'SN/USERS/UNFOLLOW': \r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\" , {followed: false})\r\n      }\r\n\r\n    case 'SN/USERS/SET_USERS': \r\n    return {...state, users: action.users}\r\n\r\n    case 'SN/USERS/SET_CURRENT_PAGE': \r\n    return {...state, currentPage: action.currentPage}\r\n\r\n    case 'SN/USERS/SET_FILTER': \r\n    return {...state, filter: action.payload}\r\n    \r\n    case 'SN/USERS/SET_TOTAL_COUNT': \r\n    return {...state, totalUsersCount: action.totalCount}\r\n\r\n    case 'SN/USERS/TOGGLE_IS_FETCHING': \r\n    return {...state, isFetching: action.isFetching}\r\n\r\n    case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': \r\n    return {...state, followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId ] \r\n                                                             : state.followingInProgress.filter(id => id !== action.userId )}\r\n    default:\r\n      return state; \r\n    }\r\n}\r\n\r\n\r\n//ACTIONS\r\nexport const actions = {\r\n\r\n  followSuccess: (userId: number) => ({ type: 'SN/USERS/FOLLOW', userId} as const),\r\n \r\n  unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n\r\n  setUsers: (users: Array<UserType>) => ({type:  'SN/USERS/SET_USERS', users} as const),\r\n\r\n  setCurrentPage: (pageNumber: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage: pageNumber} as const),\r\n\r\n  setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n\r\n  setTotalCount: (totalCount: number) => ({type: 'SN/USERS/SET_TOTAL_COUNT', totalCount} as const),\r\n\r\n  toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n\r\n  toggleFollowingProgress: (isFetching: boolean,userId: number) => ({type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',  isFetching,  userId} as const),\r\n\r\n}\r\n\r\n\r\n///THUNKS CREATORS\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => {\r\n  return async (dispatch) =>{\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(currentPage));\r\n    dispatch(actions.setFilter(filter));\r\n\r\n    let data = await usersAPI.getUsers(currentPage,pageSize,filter)  \r\n\r\n    dispatch(actions.toggleIsFetching(false));  \r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalCount(data.totalCount))\r\n  }\r\n} \r\n\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, \r\n                                   userId: number, \r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>, \r\n                                   actionCreator: (userId: number)=> ActionsTypes ) =>{\r\n  debugger                                  \r\n  dispatch(actions.toggleFollowingProgress(true,userId));\r\n  let response = await apiMethod(userId)\r\n\r\n  if(response.resultCode===0){\r\n    dispatch(actionCreator(userId))\r\n  } \r\n  dispatch(actions.toggleFollowingProgress(false,userId));\r\n}\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async (dispatch: DispatchType) =>{\r\n    await _followUnfollowFlow(dispatch,userId,usersAPI.follow.bind(usersAPI),actions.followSuccess)  \r\n  }\r\n} \r\n\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async (dispatch: DispatchType) =>{\r\n    await _followUnfollowFlow(dispatch,userId,usersAPI.unfollow.bind(usersAPI),actions.unfollowSuccess)  \r\n  }\r\n}\r\n\r\n\r\nexport default usersReducer;\r\n\r\n\r\n//Types \r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","import { getAuthUserData } from \"./auth-reducer\";\r\nimport { InferActionsTypes } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  initialazed: false\r\n  } \r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   \r\n    switch(action.type){\r\n  \r\n      case 'SN/APP/INITIALAZED_SUCCESS':\r\n        return{\r\n          ...state,\r\n          initialazed: true, \r\n        }\r\n\r\n      default:\r\n        return state; \r\n      }\r\n  }\r\n\r\n  \r\n// ACTIONS CREATORS\r\n  export const actions = {\r\n    initialazedSuccess: () => ({type: 'SN/APP/INITIALAZED_SUCCESS'}as const)\r\n  }\r\n  \r\n\r\n// Thunks Creators\r\n  export const initializeApp = () => (dispatch: any) =>{\r\n    dispatch(getAuthUserData()) \r\n    .then(()=>{    \r\n      dispatch(actions.initialazedSuccess())\r\n    })   \r\n  }\r\n\r\nexport default appReducer;\r\n\r\n//Types\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reduser\";\r\n\r\nlet reducers = combineReducers({\r\n profilePage: profileReducer,\r\n dialogsPage: dialogsReducer,\r\n usersPage: usersReducer,\r\n auth: authReducer,\r\n form: formReducer,\r\n app: appReducer,\r\n chat: chatReducer\r\n})\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\r\n\r\ntype ReducersType = typeof reducers; /// (state: GLOBALSTATE) => GLOBALSTATE\r\nexport type AppStateType = ReturnType<ReducersType>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction< R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","export default __webpack_public_path__ + \"static/media/Preloader.aa9db3e3.png\";","import React from 'react'\r\nimport preloader from '../../../assets/img/Preloader.png'\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <div className={s.overlay}>\r\n       <div className={s.preloader}>\r\n         <img src={preloader} className={s.preloader__image_animate}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader\r\n","import React, { useState } from 'react'\r\nimport { Pagination } from 'antd'\r\n\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount,pageSize,currentPage, onCurrentPageChanged}) => {\r\n \r\n  \r\n  let pagesCount = Math.ceil(totalItemsCount/pageSize);\r\n  \r\n\r\n  let pages =[]\r\n  for(let i=1; i<=pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  \r\n  \r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n\r\n  return (\r\n      <div>    \r\n        <div>\r\n          {portionNumber>1 && <button onClick={()=>{setPortionNumber(portionNumber-1)}} >PREV</button> } \r\n\r\n          {            \r\n            <Pagination current={currentPage}\r\n                        onChange={(page) => onCurrentPageChanged(page) } \r\n                        showSizeChanger={false} \r\n                        total={pagesCount} \r\n                        />                                                       \r\n          }\r\n        </div>     \r\n      </div> \r\n  )\r\n}\r\n\r\nexport default Paginator\r\n\r\n\r\n////Types \r\ntype PropsType ={\r\n  totalItemsCount: number\r\n  pageSize: number\r\n  currentPage: number \r\n  onCurrentPageChanged: (p: number)=> void\r\n  portionSize?: number\r\n}\r\n","export default __webpack_public_path__ + \"static/media/userImg.1ab4050b.jpg\";","import { AppStateType } from './redux-store';\r\n\r\nexport const getUsers = (state: AppStateType) =>{\r\n  return state.usersPage.users;\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) =>{\r\n  return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) =>{\r\n  return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) =>{\r\n  return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) =>{\r\n  return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) =>{\r\n  return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) =>{\r\n  return state.usersPage.filter;\r\n}","import React from 'react'\r\nimport s from './user.module.css'\r\nimport userImg from '../../assets/img/userImg.jpg'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFollowingInProgress, getIsFetching } from '../../redux/users-selectors';\r\nimport { follow, unfollow } from '../../redux/users-reduser';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\n\r\n\r\n\r\nexport const User: React.FC<PropsType> =({user}) => {\r\n  \r\n  const isFetching = useSelector(getIsFetching)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n  const dispatch = useDispatch()\r\n  \r\n  const onFollow = (userId: number) => {\r\n    dispatch(follow(userId))\r\n  }\r\n\r\n\r\n  const onUnfollow = (userId: number) => {\r\n    dispatch(unfollow(userId))\r\n  }\r\n\r\n  return (   \r\n      <div key ={user.id} className={s.mainWrap}  >\r\n        <Row>\r\n           <Col className={s.avatarWrap} >\r\n              <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                  <Avatar className={s.avatar} shape=\"square\" size={80} src={user.photos.small != null ? user.photos.small : userImg}  />  \r\n                </NavLink>       \r\n              </div>\r\n              \r\n              {user.followed \r\n                ? isFetching ||            \r\n                  <Button className={s.button} \r\n                          loading={followingInProgress.some(id=>id===user.id)} \r\n                          size={'small'} type={'primary'} \r\n                          disabled={followingInProgress.some(id=>id===user.id)} \r\n                          onClick={() =>{onUnfollow(user.id) }}>UNFOLLOW</Button>\r\n\r\n                : isFetching || \r\n                  <Button className={s.button} \r\n                          loading={followingInProgress.some(id=>id===user.id)} \r\n                          size={'small'} type={'primary'} \r\n                          disabled={followingInProgress.some(id=>id===user.id)} \r\n                          onClick={() =>{onFollow(user.id)}}>FOLLOW</Button>\r\n              }\r\n           </Col>\r\n\r\n           <Col>\r\n            <NavLink to={'/profile/' + user.id}>\r\n              <div><p className={s.name}> {user.name} </p></div>\r\n              <p className={s.status} style={{fontWeight: 'bold', color: 'gray'}}>{user.status}</p>\r\n            </NavLink>\r\n\r\n           </Col>\r\n\r\n        </Row>   \r\n              \r\n      </div>\r\n  )\r\n}\r\n\r\nexport default User\r\n\r\n//Types\r\ntype PropsType = {\r\n  user: UserType,\r\n}\r\n\r\n","import { Field, Formik } from 'formik';\r\nimport { FilterType } from '../../redux/users-reduser';\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { Option } from 'antd/lib/mentions';\r\nimport { Form, Input, Select } from 'formik-antd'\r\n\r\n\r\n\r\nconst usersSearchFormValidate = (values: UsersSearcgObjType) => {\r\n  const errors = {};\r\n  if (!values.term) {\r\n \r\n  } else if (\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.term)\r\n  ) {\r\n   \r\n  }\r\n  return errors;\r\n}\r\n\r\n\r\n//Form\r\nconst UsersSearchForm: React.FC<UserSearchPropsType> = React.memo(\r\n  (props) =>{ \r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n\r\n    const submit = (values: FilterFormType, { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n\r\n      const filter: FilterType = {\r\n        term: values.term,\r\n        friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false \r\n      }\r\n\r\n      props.onFilterChanged(filter)\r\n      setSubmitting(false)\r\n    }\r\n  \r\n  \r\n    return <div>\r\n        <div>\r\n       <Formik\r\n         enableReinitialize\r\n         initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n         validate={usersSearchFormValidate}\r\n         onSubmit={submit}\r\n       >\r\n         {({ isSubmitting }) => (\r\n           <Form>\r\n             <Row>\r\n\r\n              <Col span={12}>            \r\n                  <Input type=\"text\" name=\"term\" placeholder=\"Here you can find users\" />\r\n              </Col>\r\n\r\n              <Col span={12}>            \r\n                <Select  name=\"friend\" defaultValue={\"null\"} style={{ width: 120 }}>\r\n                    <Option value=\"null\">All</Option>\r\n                    <Option value=\"true\">Only Friends</Option>\r\n                    <Option value=\"false\">Only Unfollowed</Option>\r\n                </Select> \r\n\r\n                <Button disabled={isSubmitting} htmlType=\"submit\" type=\"primary\">Find</Button>\r\n\r\n              </Col>       \r\n             </Row>            \r\n           </Form>\r\n         )}\r\n       </Formik>\r\n     </div>\r\n    </div>\r\n  }\r\n) \r\n\r\n\r\nexport default UsersSearchForm\r\n////Types\r\ntype UserSearchPropsType ={\r\n  onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype UsersSearcgObjType = {\r\n  term: string\r\n}\r\ntype FriendFormType = \"null\" | \"true\" | \"false\"\r\n\r\ntype FilterFormType ={\r\n  term: string\r\n  friend: FriendFormType\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <Field type=\"text\" name=\"term\" />\r\n             <Field name=\"friend\" as=\"select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only Friends</option>\r\n              <option value=\"false\">Only Unfollowed</option>\r\n            </Field>\r\n             <button type=\"submit\" disabled={isSubmitting}>\r\n               Find\r\n             </button> */}","import React, { useEffect } from 'react'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport Paginator from '../Common/Paginator/Paginator';\r\nimport User from './User';\r\nimport UsersSearchForm from './UsersSearchForm';\r\nimport { getTotalUsersCount, getCurrentPage, getPageSize, getUsers, getUsersFilter, getFollowingInProgress, getIsFetching } from '../../redux/users-selectors';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { requestUsers,FilterType,follow,unfollow } from '../../redux/users-reduser';\r\nimport { useHistory } from 'react-router';\r\nimport * as  queryString  from 'querystring';\r\n\r\nexport const Users: React.FC = (props) => {\r\n  \r\n  ////UseSelectors\r\n  const totalUsersCount = useSelector(getTotalUsersCount)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const isFetching = useSelector(getIsFetching)\r\n  const pageSize = useSelector(getPageSize)\r\n  const filter = useSelector(getUsersFilter)\r\n  const users = useSelector(getUsers)\r\n  \r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n\r\n  ////CallBack\r\n  const onCurrentPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter))\r\n  }\r\n\r\n\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1,pageSize, filter))\r\n  }\r\n\r\n  ////\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(history.location.search.substr(1))\r\n\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n\r\n    if (!!parsed.page) actualPage = Number(parsed.page)\r\n    if (!!parsed.term) actualFilter = {...actualFilter , term: parsed.term as string }\r\n\r\n    switch(parsed.friend){\r\n      case \"null\": \r\n        actualFilter = {...actualFilter , friend: null}\r\n        break\r\n      case \"true\": \r\n        actualFilter = {...actualFilter , friend: true}\r\n        break\r\n      case \"false\": \r\n        actualFilter = {...actualFilter , friend: false}\r\n        break  \r\n    }\r\n\r\n    dispatch(requestUsers(actualPage,pageSize, actualFilter))\r\n\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const query: QueryParamsType = {}\r\n    if(!!filter.term) query.term = filter.term\r\n    if(filter.friend !== null) query.friend = String(filter.friend)\r\n    if(currentPage !== 1) query.page =  String(currentPage) \r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: queryString.stringify(query)   \r\n    })\r\n  }, [filter,currentPage])\r\n\r\n  \r\n  return (  \r\n      <div>\r\n\r\n      <div>{isFetching ? <Preloader/> : null} </div>\r\n      \r\n      <UsersSearchForm onFilterChanged={onFilterChanged}  />\r\n\r\n      {\r\n        users.map(u => <User user={u} key={u.id} />)\r\n      }\r\n      <div style={{paddingTop: '10px', textAlign: 'center'}}>\r\n        <Paginator currentPage={currentPage} \r\n                   onCurrentPageChanged={onCurrentPageChanged} \r\n                   totalItemsCount={totalUsersCount} \r\n                   pageSize={pageSize} />\r\n      </div>\r\n      \r\n    </div>  \r\n  )\r\n}\r\n\r\n\r\n////Types \r\n\r\ntype QueryParamsType = {term?: string, page?: string, friend?: string}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../../../redux/redux-store'\r\nimport s from './Post.module.css'\r\nimport defaultPhoto from '../../../../assets/img/userImg.jpg'\r\nimport Avatar from 'antd/lib/avatar/avatar'\r\nimport { Comment, Tooltip } from 'antd'\r\nimport moment from 'moment';\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n\r\n  \r\n\r\n\r\n  let photo = useSelector((state: AppStateType) => state.auth.photos.large)\r\n  let login = useSelector((state: AppStateType) => state.auth.login)\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <Comment\r\n        author={<a style={{color: 'black', fontWeight: 'bold'}}>{login}</a>}\r\n        avatar={\r\n          <Avatar\r\n            src={photo===null? defaultPhoto : photo}\r\n            alt={login===null? ' ' : login }\r\n          />}\r\n          content={\r\n            <p style={{color: 'black'}}>\r\n             {props.message}\r\n            </p>\r\n          }\r\n        datetime={\r\n          <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n            <span style={{color: 'black'}}>{moment().fromNow()}</span>\r\n          </Tooltip>\r\n        }\r\n      />\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n\r\n////Types\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\n","import React from 'react'\r\nimport Post from './Posts/Post'\r\nimport s from './MyPosts.module.css'\r\nimport { InjectedFormProps, reduxForm, submit } from 'redux-form';\r\nimport { maxLenghtCreator } from '../../../utils/validators/validators';\r\nimport { createField, Textarea } from '../../Common/FormControls/FormControls';\r\nimport { PostType } from '../../../types/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { Button } from 'antd';\r\n\r\n\r\nconst maxLenght = maxLenghtCreator(25);\r\n\r\n\r\nconst MyPosts: React.FC = () => {\r\n\r\n  const postsElements = useSelector((state: AppStateType) => state.profilePage.posts).map((p,index) => <Post key={index} message={p.message} likesCount={p.likesCount}/>)\r\n  \r\n\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const onAddPost = (values: AddPostValuesType) =>{\r\n    dispatch(actions.addPost(values.postText));\r\n  }\r\n\r\n  return (  \r\n    <div className={s.postBlock}>\r\n      <h3>MY POSTS</h3>  \r\n      <ReduxAddPostForm onSubmit={onAddPost}/>    \r\n      <div>\r\n        {postsElements}\r\n      </div>\r\n    </div>  \r\n  )\r\n}\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostPropsType & AddPostValuesType >> = (props) =>{\r\n  return(\r\n    <form >\r\n\r\n      {createField<AddPostValuesKeys>(\"Your Post\",\"postText\",[maxLenght],Textarea)}\r\n\r\n      <Button onClick={props.handleSubmit} type={'primary'} className={s.submitButton}>Add post</Button>\r\n      \r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nconst ReduxAddPostForm = reduxForm<AddPostValuesType>({form: \"addPost\"})(AddPostForm)\r\n\r\nexport default MyPosts\r\n\r\n\r\n//Types\r\n///AddPostFormTypes\r\ntype AddPostPropsType ={\r\n}\r\ntype AddPostValuesType ={\r\n  postText: string\r\n}\r\ntype AddPostValuesKeys = Extract<keyof AddPostValuesType, string>\r\n","import { Col, Input } from 'antd'\r\nimport React, { useState, useEffect, ChangeEvent } from 'react'\r\nimport s from './ProfileStatus.module.css'\r\n\r\n\r\nconst ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    const [editMode, seteditMode] = useState(false)\r\n    const [status, setstatus] = useState(props.status)\r\n    \r\n\r\n    useEffect(()=> {\r\n      setstatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () =>{\r\n      if(props.isOwner){\r\n        seteditMode(true);\r\n      }  \r\n    }\r\n\r\n\r\n    const deactivateEditMode = () =>{\r\n      seteditMode(false);\r\n      props.updateUserStatus(status)\r\n    }\r\n\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) =>{\r\n      setstatus(e.currentTarget.value);  \r\n    }\r\n    \r\n\r\n    return(\r\n        <Col span={6}>\r\n          { !editMode &&     \r\n            <div className={s.statusWrap} style={{marginTop:'5px',marginBottom:'5px'}}>\r\n              <span  className={s.status} onClick={activateEditMode}>{status? status : \"...\"}</span>\r\n            </div>          \r\n          }\r\n          {editMode && \r\n            <div>\r\n              <Input maxLength={20} style={{marginBottom:'5px',marginTop:'5px'}} onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>\r\n          }\r\n        </Col>\r\n    \r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default ProfileStatusWithHook\r\n\r\n////Types\r\ntype PropsType = {\r\n  status: string\r\n  isOwner: boolean\r\n  updateUserStatus: (status: string) => void\r\n}\r\n","import React, { ChangeEvent } from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { ProfileType } from '../../../types/types'\r\nimport { required } from '../../../utils/validators/validators'\r\nimport Textarea, { createField, Input } from '../../Common/FormControls/FormControls'\r\nimport  {savePhoto} from '../../../redux/profile-reducer';\r\nimport { useDispatch } from 'react-redux'\r\nimport { Button } from 'antd'\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps< ProfileType & PDFPropsType >  > = ({handleSubmit } ) => {\r\n\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) =>{\r\n    if(e.target.files?.length){\r\n      dispatch(savePhoto(e.target.files[0]))\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n         \r\n          <div>\r\n            {<input type={\"file\"} onChange={onMainPhotoSelected}></input>}\r\n          </div>   \r\n          <div>\r\n            <b>Full name: </b> {createField<ProfileDataFormValuesKeys>(\"Full name\", \"fullName\", [required], Input)}\r\n          </div>\r\n          <div>\r\n            <b>Looking for a job: </b>{createField<ProfileDataFormValuesKeys>(\"\", \"lookingForAJob\", [], Input,{type: \"checkbox\"})}\r\n          </div>\r\n          <div>\r\n            <b>About me: </b>{createField<ProfileDataFormValuesKeys>(\"About me\", \"aboutMe\", [required], Textarea)}\r\n          </div>\r\n          \r\n          <div><Button onClick={handleSubmit} >SAVE</Button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataFormWithRedux = reduxForm<ProfileType & PDFPropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataFormWithRedux\r\n\r\n////Types\r\ntype PDFPropsType ={\r\n  onSubmit: () => void\r\n  initialValues: ProfileType\r\n  onMainPhotoSelected: () => void\r\n}\r\n///Keys\r\ntype PDFValuesType ={\r\n  fullName: string\r\n  lookingForAJob: string\r\n  aboutMe: string\r\n}\r\ntype ProfileDataFormValuesKeys = Extract<keyof PDFValuesType, string>","import React, { ChangeEvent, useState } from 'react'\r\nimport Preloader from '../../Common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport defaultUserImg from '../../../assets/img/userImg.jpg'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport { ContactsType, ProfileType } from '../../../types/types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\nimport {  updateUserStatus,savePhoto,saveProfile} from '../../../redux/profile-reducer';\r\nimport { Button } from 'antd'\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n  const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n  \r\n\r\n\r\n  if(!profile){\r\n    return <Preloader/>\r\n  }\r\n\r\n\r\n  const onSubmit = (profile: ProfileType) =>{\r\n    dispatch(saveProfile(profile))\r\n    setEditMode(false)\r\n  }\r\n  \r\n\r\n  const onUpdateUserStatus = (status: string) =>{\r\n    dispatch(updateUserStatus)\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n         <img className ={s.userImg}  src={profile.photos.large || defaultUserImg} /> \r\n                                  \r\n        \r\n        <ProfileStatus isOwner={props.isOwner} status={status} updateUserStatus={onUpdateUserStatus}/>\r\n        {editMode ?<ProfileDataForm initialValues={profile}  onSubmit={onSubmit} /> \r\n                  :<ProfileData  profile ={profile} isOwner={props.isOwner} toEditMode={()=>{setEditMode(true)}} />}\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) =>{\r\n  return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\r\n}\r\n\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile,isOwner, toEditMode}) => {\r\n  \r\n  return(\r\n    <div>     \r\n          <div>\r\n            <b>Full name: </b>{profile.fullName ? profile.fullName : \" ---\"}\r\n          </div>\r\n          <div>\r\n            <b>Looking for a job: </b>{profile.lookingForAJob ? \"yes\" : \"no\"}\r\n          </div>\r\n          <div>\r\n            <b>About me: </b>{profile.aboutMe ? profile.aboutMe : \"---\"}\r\n          </div>\r\n          \r\n          <div>\r\n            <b>Contacts: </b>{Object\r\n                                .keys(profile.contacts)\r\n                                .map((key) =>{\r\n                                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n\r\n            {isOwner && <div><Button type='primary' onClick={toEditMode}>Edit</Button></div>}\r\n\r\n      </div>\r\n    </div>\r\n   )\r\n}\r\n\r\n\r\nexport default ProfileInfo\r\n\r\n////Types\r\n//ProfileInfo\r\ntype ProfileInfoPropsType = {\r\n  isOwner: boolean \r\n}\r\n//ProfileDataTypes\r\ntype ProfileDataType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  toEditMode: () => void\r\n}\r\n//ContactType\r\ntype ContactPropsType ={\r\n  contactTitle: string\r\n  contactValue: string | null\r\n}\r\n","import React from 'react'\r\nimport { ProfileType } from '../../types/types'\r\nimport MyPosts from './MyPosts/MyPosts'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n  return (\r\n    <div >\r\n      \r\n      <ProfileInfo isOwner={props.isOwner} />\r\n\r\n      <MyPosts />\r\n\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n\r\n\r\n////Types\r\ntype ProfilePropsType = {\r\n  isOwner: boolean\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nfunction withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>)  {\r\n\r\n  const RedirectComponent: React.FC< MapPropsType> = (props) => {\r\n    if(!props.isAuth){\r\n      return  <Redirect to='/login' />\r\n    }\r\n    return <WrappedComponent {...props as unknown as WCP }/>   \r\n  }\r\n  \r\n  let ConnectedRedirectComponent = connect<MapPropsType,{},WCP,AppStateType>(\r\n    mapStateToPropsForRedirect)\r\n  (RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n\r\n\r\nexport default withAuthRedirect\r\n\r\n// Types\r\ntype MapPropsType = ReturnType<typeof mapStateToPropsForRedirect>\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getUserStatus, updateUserStatus,savePhoto,saveProfile, actions} from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  \r\n  refreshProfile(){\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if(!userId && this.props.isAuth){\r\n\r\n      userId= this.props.myId;\r\n      if(!userId){\r\n        this.props.history.push(\"/login\")\r\n      }\r\n    }\r\n    if(userId){\r\n      \r\n      this.props.getUserProfile(userId)\r\n      this.props.getUserStatus(userId)\r\n    }\r\n  }\r\n\r\n  componentDidMount(){ \r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType){\r\n    if(this.props.match.params.userId != prevProps.match.params.userId){\r\n      this.refreshProfile()\r\n    }   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile isOwner={!this.props.match.params.userId} />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) =>({\r\n  profile: state.profilePage.profile,\r\n  myId: state.auth.userId,\r\n  status: state.profilePage.status,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {getUserProfile,getUserStatus,updateUserStatus,savePhoto,saveProfile, ...actions}),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n////Types\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getUserStatus: (userId: number) => void\r\n  updateUserStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => void\r\n}\r\n//WithRouterType\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\ntype RouterPropsType = RouteComponentProps<PathParamsType>\r\n///\r\ntype PropsType = MapPropsType & DispatchPropsType & RouterPropsType","import { Button, Col, Row } from 'antd';\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { login} from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { maxLenghtCreator, required } from '../../utils/validators/validators'\r\nimport { Input,createField } from '../Common/FormControls/FormControls'\r\nimport style from '../Common/FormControls/FormControls.module.css'\r\nconst maxLenght = maxLenghtCreator(25);\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({handleSubmit, error}) =>{\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n        {createField<LoginFormValuesKeys>(\"Email\",\"email\",[required,maxLenght],Input)}\r\n\r\n        {createField<LoginFormValuesKeys>(\"Password\",\"password\",[required,maxLenght],Input,{type:\"password\"})}\r\n\r\n        <Row >\r\n            {createField<LoginFormValuesKeys>(undefined,\"rememberMe\",[maxLenght],Input,{type:\"checkbox\"})} \r\n            <span className={style.rememberMe}>Remember Me</span> \r\n        </Row>\r\n\r\n        {error && \r\n        <div>\r\n          <span className={style.formSummaryError} >{error}</span>\r\n        </div> }\r\n\r\n        <div><Button onClick={handleSubmit} >LOGIN</Button></div>\r\n      </form>\r\n  )\r\n}\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType>({ form:'login', })(LoginForm) \r\n\r\n\r\n//// JSX\r\nexport const LoginPage: React.FC = (props) => {\r\n  \r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) =>{ \r\n    dispatch(login(formData.email, formData.password, formData.rememberMe))\r\n  }\r\n\r\n\r\n  if (isAuth){\r\n    return <Redirect to=\"/profile\"/>\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1>LOGIN</h1>\r\n      <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n//Types\r\n/////Keys From generic createField\r\nexport type LoginFormValuesType ={\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\ntype LoginFormValuesKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\n\r\n\r\n\r\n","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport s from'./header.module.css'\r\nimport { Redirect } from 'react-router';\r\nimport { Button, Col,  Menu, Row} from 'antd';\r\nimport { Header } from 'antd/lib/layout/layout';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { UserOutlined} from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport defaultUserImg from '../../assets/img/userImg.jpg'\r\nimport { getUserProfile } from '../../redux/profile-reducer';\r\n\r\n\r\nexport const AppHeader: React.FC = (props) => {\r\n \r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n  const login = useSelector((state: AppStateType) => state.auth.login)\r\n  let photo = useSelector((state: AppStateType) => state.auth.photos.large)\r\n\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onLogoutClick = () => {\r\n    debugger\r\n    dispatch(logout());\r\n    <Redirect to=\"/login\"/>\r\n  }\r\n\r\n  return ( \r\n    <Header className=\"header\">\r\n      <div className=\"logo\" />\r\n      <Row>\r\n        <Col span={18}>\r\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n            {/* <Menu.Item key=\"1\"><Link to={\"/users\"} >Users</Link></Menu.Item>                 */}\r\n          </Menu>\r\n        </Col>\r\n         \r\n        <Col span={4}>\r\n          <div className={s.loginBlock}>\r\n            {isAuth ? <div> \r\n                      <Avatar style={{ backgroundColor: '#87d068', marginRight: 3 }} src={photo || defaultUserImg}  /> \r\n                      <strong>{login}</strong>\r\n                      <Button type=\"primary\" onClick={onLogoutClick} >Logout</Button>\r\n                      </div>\r\n              : <Button type=\"primary\" onClick={onLogoutClick} ><Link to={'/login'}>LOGIN</Link></Button>}    \r\n          </div>\r\n        </Col>      \r\n\r\n      </Row>\r\n    </Header>\r\n  )\r\n}\r\n\r\n\r\n////Types\r\nexport type MapPropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\nexport type DispatchrPropsType = {\r\n  logout: () => void\r\n}","import { Route, withRouter } from 'react-router';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { HashRouter, Link} from \"react-router-dom\";\nimport {Users} from './components/Users/Users';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport {LoginPage} from './components/Login/Login';\nimport React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport { initializeApp } from './redux/app-reducer';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { compose } from 'redux';\nimport store, { AppStateType } from './redux/redux-store';\nimport { Col, Layout, Menu} from 'antd';\nimport { UserOutlined, LaptopOutlined } from '@ant-design/icons';\nimport { AppHeader } from './components/Header/Header';\nimport Profile from './components/Profile/Profile';\n\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\n\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\nconst Dialogs = React.lazy(() => import('./components/Dialogs/Dialogs'))\n\n\nclass App extends React.Component<StatePropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e :PromiseRejectionEvent) => {\n    \n  }\n\n\n  componentDidMount(){\n    this.props.initializeApp(); \n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n  }\n\n\n  componentWillUnmount(){\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n  }\n\n\n  render(){\n\n    if(!this.props.initialazed){\n      return <Preloader/>\n    }\n    \n   \n    return (\n             \n      <HashRouter >\n         <Layout >\n         <AppHeader/>\n          <Content style={{ padding: '0 50px' }}>\n            {/* <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>List</Breadcrumb.Item>\n              <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb> */}\n            <Layout className=\"site-layout-background\" style={{ padding: '24px 0'}}>\n              <Sider className=\"site-layout-background\" width={200}>\n                <Menu\n                  mode=\"inline\"\n                  style={{ height: '100%' }}\n                >\n                  <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n                      <Menu.Item key=\"1\"><Link to={\"/profile\"} >Profile</Link></Menu.Item>\n                      {/* <Menu.Item key=\"2\"><Link to={\"/dialogs\"} >Dialogs</Link></Menu.Item>             */}\n                  </SubMenu>\n\n                  <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Community\">\n                      <Menu.Item key=\"3\"><Link to={\"/users\"} >Users</Link></Menu.Item>\n                      <Menu.Item key=\"4\"><Link to={\"/chat\"} >Group Chat</Link></Menu.Item>\n                  </SubMenu>\n                </Menu>\n              </Sider>\n              <Content style={{ padding: '0 24px', minHeight: 280 }}>\n\n                {/* <Route path=\"/dialogs\" render={ () =>  <React.Suspense fallback={<div>Loading...</div>}>\n                Component for testing React.lazy ->  <Dialogs />      \n                                                       </React.Suspense> }/>   */}\n                                                \n                <Route path=\"/chat\" render={ () =>  <React.Suspense fallback={<div>Loading...</div>}>\n                {/* Component for testing React.lazy ->*/}  <ChatPage/>      \n                                                       </React.Suspense> }/> \n                                                       \n                <Route path=\"/profile/:userId?\" render={ () => <ProfileContainer />}/>\n\n                <Route path=\"/users\" render={ () => <Users/>}/>\n\n                <Route path=\"/login\" render={ () => <LoginPage/>}/>\n                \n                {/* <Route path=\"*\" render={ () => <div> 404 NOT FOUND</div>}/> */}\n\n              </Content>\n            </Layout>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Created by SaBaTeuR</Footer>\n        </Layout>,\n      </HashRouter>\n          \n    );\n  }\n  \n}\n\n\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialazed: state.app.initialazed\n})\n\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps,{initializeApp})\n  )(App)\n\nconst MainApp: React.FC = () =>{\n  return (\n    <HashRouter>\n      <Provider store={store}>\n                <AppContainer />\n              </Provider> \n    </HashRouter>\n  )           \n}\n\nexport default MainApp;\n\n//Types\ntype StatePropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n","import store from './redux/redux-store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\n\n\n\n  ReactDOM.render(\n    <MainApp/>\n      ,\n    document.getElementById('root')\n  );\n\n\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) =>{\r\n  if(value) return undefined\r\n  return ('Field is required');\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght: number): FieldValidatorType => (value: string) =>{\r\n  if (value){\r\n    if(value.length > maxLenght){\r\n      return `Max lenght is ${maxLenght} symbols`;\r\n    }   \r\n  }\r\n  return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrap\":\"user_mainWrap__tZ-eI\",\"avatarWrap\":\"user_avatarWrap__182DF\",\"avatar\":\"user_avatar__2YDK-\",\"name\":\"user_name__1WBxp\",\"status\":\"user_status__1DB__\"};"],"sourceRoot":""}